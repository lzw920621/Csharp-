using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace 析构函数
{
    /*
    析构函数可以在一个类的实例不再被引用的时候执行一些操作,以清除或释放非托管资源
    注意点:
    1.每个类只能有一个析构函数
    2.析构函数不能有参数
    3.析构函数不能有访问修饰符
    4.析构函数名称和类名相同,但前面要加上波浪符
    5.析构函数只能作用于类的实例,因此没有静态析构函数
    6.不能在代码中显式的调用析构函数.  当垃圾回收器分析代码并认为代码中不存在指向该对象的可能路径时,系统会在垃圾回收过程中调用析构函数

    使用析构函数时的一些重要原则
    不要再不需要时实现析构函数,这会严重影响性能
    析构函数只应该释放对象拥有的外部资源
    析构函数不应该访问其他对象,因为无法确定这些对象是否已经被销毁

    与C++的析构函数不同,C#析构函数不会在实例超出作用域时立即调用.事实上,你无法知道何时会调用析构函数.你所能知道的是系统会在对象从托管堆中移除之前的某个时刻调用析构函数

    */
    class MyClass
    {

        ~MyClass()
        {
            //Clean up code
        }
    }

    class Program
    {
        static void Main(string[] args)
        {
        }
    }
}
